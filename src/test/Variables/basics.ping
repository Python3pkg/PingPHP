var = 'Bob'
Var = 'Joe'
echo "$var, $Var"      # 输出 "Bob, Joe"

#4site = 'not yet'     # 非法变量名；以数字开头
_4site = 'not yet'    # 合法变量名；以下划线开头
#$i站点is = 'mansikka'  # 合法变量名；可以用中文

''''''

foo = 'Bob'              # 将 'Bob' 赋给 $foo
bar = &foo              # 通过 $bar 引用 $foo
bar = "My name is $bar"  # 修改 $bar 变量
echo bar
echo foo                 # $foo 的值也被修改

''''''

foo = 25
bar = &foo      # 合法的赋值
bar = &(24 * 7)  # 非法 引用没有名字的表达式

def test():
   return 25

bar = &test()    # 非法

''''''

# Unset AND unreferenced (no use context) variable outputs NULL
var_dump(unset_var)

# Boolean usage outputs 'false' (See ternary operators for more on this syntax)
echo ("true\n" if unset_bool else "false\n")

# String usage outputs 'string(3) "abc"'
unset_str <<<= 'abc'
var_dump(unset_str)

# Integer usage outputs 'int(25)'
unset_int += 25 # 0 + 25 => 25
var_dump(unset_int)

# Float/double usage outputs 'float(1.25)'
unset_float += 1.25
var_dump(unset_float)

# Array usage outputs array(1) {  [3]=>  string(3) "def" }
unset_arr[3] = "def" # array() + array(3 => "def") => array(3 => "def")
var_dump(unset_arr)

# Object usage creates new stdClass object (see http:#www.php.net/manual/en/reserved.classes.php)
# Outputs: object(stdClass)#1 (1) {  ["foo"]=>  string(3) "bar" }
unset_obj.foo = 'bar'
var_dump(unset_obj)
