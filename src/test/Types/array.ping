''''''
array_ = [\
    "foo" : "bar", \
    "bar" : "foo" \
]

''''''

array_ = [ \
    1    : "a", \
    "1"  : "b", \
    1.5  : "c", \
    true : "d" \
]

var_dump(array_)

''''''

array_ = [ \
    "foo" : "bar", \
    "bar" : "foo", \
    100   : -100, \
    -100  : 100 \
]

var_dump(array_)

''''''

array_ = array("foo", "bar", "hallo", "world")
var_dump(array_)

''''''

array_ = [ \
         "a", \
         "b", \
    6 :  "c", \
         "d"  \
]
var_dump(array_)

''''''

array_ = [ \
    "foo" : "bar", \
    42    : 24, \
    "multi" : [ \
         "dimensional" : [ \
             "array" : "foo" \
         ] \
    ] \
]

var_dump(array_["foo"])
var_dump(array_[42])
var_dump(array_["multi"]["dimensional"]["array"])

''''''

def getArray():
    return array(1, 2, 3)

# on PHP 5.4
secondElement = getArray()[1]

# previously
tmp = getArray()
secondElement = tmp[1]

# or
list(_, secondElement) = getArray()

''''''

arr = [5 : 1, 12 : 2]

arr[] = 56    # This is the same as $arr[13] = 56
                # at this point of the script

arr["x"] = 42 # This adds a new element to
                # the array with key "x"
                
unset(arr[5]) # This removes the element from the array

unset(arr)    # This deletes the whole array

''''''

# 创建一个简单的数组
array_ = array(1, 2, 3, 4, 5)
print_r(array_)

# 现在删除其中的所有元素，但保持数组本身不变:
for i,value in array_:
    unset(array_[i])

print_r(array_)

# 添加一个单元（注意新的键名是 5，而不是你可能以为的 0）
array_[] = 6
print_r(array_)

# 重新索引：
array_ = array_values(array_)
array_[] = 7
print_r(array_)

''''''

a = [1 : 'one', 2 : 'two', 3 : 'three']
unset(a[2])
'''will produce an array that would have been defined as
   $a = array(1 => 'one', 3 => 'three')
   and NOT
   $a = array(1 => 'one', 2 =>'three')
'''

b = array_values(a)
# Now $b is array(0 => 'one', 1 =>'three')

''''''

foo[bar] = 'enemy'
echo foo[bar]
# etc

''''''

error_reporting(E_ALL)
ini_set('display_errors', true)
ini_set('html_errors', false)
# Simple array:
array_ = array(1, 2)
count = count(array_)
for i in range(0, count-1):
    echo "\nChecking $i: \n"
    echo "Bad: " <<< array_['$i'] <<< "\n"
    echo "Good: " <<< array_[i] <<< "\n"
    echo "Bad: {$array['$i']}\n"
    echo "Good: {$array[$i]}\n"

''''''

# Show all errors
error_reporting(E_ALL)

arr = ['fruit' : 'apple', 'veggie' : 'carrot']

# Correct
print arr['fruit']  # apple
print arr['veggie'] # carrot

# Incorrect.  This works but also throws a PHP error of level E_NOTICE because
# of an undefined constant named fruit
# 
# Notice: Use of undefined constant fruit - assumed 'fruit' in...
print arr[fruit]    # apple

# This defines a constant to demonstrate what's going on.  The value 'veggie'
# is assigned to a constant named fruit.
define('FRUIT', 'veggie')

# Notice the difference now
print arr['fruit']  # apple
print arr[FRUIT]    # carrot

# The following is okay, as it's inside a string. Constants are not looked for
# within strings, so no E_NOTICE occurs here
print "Hello $arr[fruit]"      # Hello apple

# With one exception: braces surrounding arrays within strings allows constants
# to be interpreted
print "Hello {$arr[fruit]}"    # Hello carrot
print "Hello {$arr['fruit']}"  # Hello apple

# This will not work, and will result in a parse error, such as:
# Parse error: parse error, expecting T_STRING' or T_VARIABLE' or T_NUM_STRING'
# This of course applies to using superglobals in strings as well
print "Hello $arr['fruit']"
print "Hello $_GET['foo']"

# Concatenation is another option
print "Hello " <<< $arr['fruit'] # Hello apple

''''''

echo arr[somefunc(bar)]

''''''

error_descriptions[E_ERROR]   = "A fatal error has occured"
error_descriptions[E_WARNING] = "PHP issued a warning"
error_descriptions[E_NOTICE]  = "This is just an informal notice"

''''''

error_descriptions[1] = "A fatal error has occured"
error_descriptions[2] = "PHP issued a warning"
error_descriptions[8] = "This is just an informal notice"

''''''

class A:
    private $A # This will become '\0A\0A'

class B extends A:
    private $A # This will become '\0B\0A'
    public $AA # This will become 'AA'

var_dump((array) new B())

''''''

# This:
a = [ 'color' : 'red',\
      'taste' : 'sweet',\
      'shape' : 'round',\
      'name'  : 'apple',\
      4 \
    ]

b = array('a', 'b', 'c')

# . . .is completely equivalent with this:
a = array()
a['color'] = 'red'
a['taste'] = 'sweet'
a['shape'] = 'round'
a['name']  = 'apple'
a[]        = 4        # key will be 0

b = array()
b[] = 'a'
b[] = 'b'
b[] = 'c'

# After the above code is executed, $a will be the array
# array('color' => 'red', 'taste' => 'sweet', 'shape' => 'round', 
# 'name' => 'apple', 0 => 4), and $b will be the array 
# array(0 => 'a', 1 => 'b', 2 => 'c'), or simply array('a', 'b', 'c').

''''''

# Array as (property-)map
map = [ \
    'version'    : 4,\
    'OS'         : 'Linux',\
    'lang'       : 'english',\
    'short_tags' : true\
]
            
# strictly numerical keys
array_ = [      7,\
                8,\
                0,\
                156,\
                -10\
         ] 
# this is the same as array(0 => 7, 1 => 8, ...)

switching = [\
                    5    :  6, \
                    3    :  7, \
                    'a'  :  4, \
                           11, \ 
                    '8'  :  2, \
                    '02' : 77, \
                    0    : 12  \
           ] 
                  
# empty array
empty = array()         

''''''

colors = array('red', 'blue', 'green', 'yellow')

for color in colors:
    echo "Do you like $color?\n"

''''''

# PHP 5

for color in colors:
    color = strtoupper(color)

unset(color) 
''' ensure that following writes to
$color will not modify the last array element '''

# Workaround for older versions
for key, color in colors:
    colors[key] = strtoupper(color)

print_r(colors)

''''''

firstquarter  = [1 : 'January', 'February', 'March']
print_r(firstquarter)

''''''

# fill an array with all items from a directory
handle = opendir('.')
while false !== (file = readdir(handle)):
    files[] = file

closedir(handle) 

''''''

sort(files)
print_r(files)

''''''

fruits = [ "fruits"  : [ "a" : "orange",\
                                       "b" : "banana",\
                                       "c" : "apple"\
                                     ],\
                  "numbers" : [ 1,\
                                       2,\
                                       3,\
                                       4,\
                                       5,\
                                       6\
                                     ],\
                  "holes"   : [      "first", \
                                       5 : "second",\
                                            "third"\
                                    ]\ 
                ]

# Some examples to address values in the array above 
echo fruits["holes"][5]    # prints "second"
echo fruits["fruits"]["a"] # prints "orange"
unset(fruits["holes"][0])  # remove "first"

# Create a new multi-dimensional array
juices["apple"]["green"] = "good" 

''''''

arr1 = array(2, 3)
arr2 = arr1
arr2[] = 4 # $arr2 is changed,
             # $arr1 is still array(2, 3)
             
arr3 = &arr1
arr3[] = 4 # now $arr1 and $arr3 are the same
